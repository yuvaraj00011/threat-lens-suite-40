import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { AlertTriangle, TrendingUp, Shield } from "lucide-react"

interface ScanResult {
  id: string
  ip: string
  hostname?: string
  ports: Array<{
    port: number
    service: string
    version?: string
    state: 'open' | 'closed' | 'filtered'
    vulnerabilities: Array<{
      cve: string
      severity: 'low' | 'medium' | 'high' | 'critical'
      description: string
      cvss: number
    }>
  }>
  os?: string
  riskLevel: 'low' | 'medium' | 'high' | 'critical'
  lastScanned: Date
}

interface NMapVulnerabilityHeatmapProps {
  results: ScanResult[]
}

export function NMapVulnerabilityHeatmap({ results }: NMapVulnerabilityHeatmapProps) {
  // Calculate vulnerability statistics
  const vulnStats = results.reduce((acc, host) => {
    host.ports.forEach(port => {
      port.vulnerabilities.forEach(vuln => {
        acc[vuln.severity] = (acc[vuln.severity] || 0) + 1
        acc.total = (acc.total || 0) + 1
      })
    })
    return acc
  }, {} as Record<string, number>)

  // Get unique services with their vulnerability counts
  const serviceVulns = results.reduce((acc, host) => {
    host.ports.forEach(port => {
      if (port.vulnerabilities.length > 0) {
        if (!acc[port.service]) {
          acc[port.service] = {
            service: port.service,
            hosts: new Set(),
            vulnerabilities: 0,
            maxSeverity: 'low' as 'low' | 'medium' | 'high' | 'critical'
          }
        }
        acc[port.service].hosts.add(host.ip)
        acc[port.service].vulnerabilities += port.vulnerabilities.length
        
        // Update max severity
        port.vulnerabilities.forEach(vuln => {
          const severityOrder = { low: 1, medium: 2, high: 3, critical: 4 }
          if (severityOrder[vuln.severity] > severityOrder[acc[port.service].maxSeverity]) {
            acc[port.service].maxSeverity = vuln.severity
          }
        })
      }
    })
    return acc
  }, {} as Record<string, any>)

  const serviceVulnArray = Object.values(serviceVulns).map(item => ({
    ...item,
    hostCount: item.hosts.size
  }))

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500'
      case 'high': return 'bg-orange-500'
      case 'medium': return 'bg-yellow-500'
      default: return 'bg-blue-500'
    }
  }

  const getRiskIntensity = (vulnerabilities: number, maxVulns: number) => {
    const intensity = Math.max(0.2, vulnerabilities / maxVulns)
    return {
      opacity: intensity,
      transform: `scale(${0.8 + intensity * 0.4})`
    }
  }

  const maxVulns = Math.max(...serviceVulnArray.map(s => s.vulnerabilities), 1)

  return (
    <Card className="bg-card/30 border-cyber-glow/20">
      <CardHeader className="pb-3">
        <CardTitle className="text-lg font-cyber text-cyber-glow flex items-center gap-2">
          <TrendingUp className="h-5 w-5" />
          Vulnerability Heatmap
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Overall Statistics */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="text-center">
            <div className="text-2xl font-mono font-bold text-cyber-glow">
              {vulnStats.total || 0}
            </div>
            <div className="text-xs text-muted-foreground">Total Vulnerabilities</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-mono font-bold text-red-500">
              {vulnStats.critical || 0}
            </div>
            <div className="text-xs text-muted-foreground">Critical</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-mono font-bold text-orange-500">
              {vulnStats.high || 0}
            </div>
            <div className="text-xs text-muted-foreground">High</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-mono font-bold text-yellow-500">
              {vulnStats.medium || 0}
            </div>
            <div className="text-xs text-muted-foreground">Medium</div>
          </div>
        </div>

        {/* Service Vulnerability Heatmap */}
        {serviceVulnArray.length > 0 ? (
          <div className="space-y-3">
            <h4 className="font-mono text-sm font-semibold text-muted-foreground">
              Service Vulnerability Distribution
            </h4>
            <div className="grid gap-2">
              {serviceVulnArray
                .sort((a, b) => b.vulnerabilities - a.vulnerabilities)
                .map((service, index) => (
                  <TooltipProvider key={index}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <div className="relative group">
                          <div 
                            className={`
                              p-3 rounded-lg border transition-all duration-300 cursor-pointer
                              ${getSeverityColor(service.maxSeverity)}/10 
                              border-${getSeverityColor(service.maxSeverity).replace('bg-', '')}/30
                              hover:border-${getSeverityColor(service.maxSeverity).replace('bg-', '')}/50
                            `}
                            style={getRiskIntensity(service.vulnerabilities, maxVulns)}
                          >
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-2">
                                <Shield className="h-4 w-4" />
                                <span className="font-mono font-semibold">{service.service}</span>
                                <Badge 
                                  className={`text-xs ${getSeverityColor(service.maxSeverity)} text-white`}
                                >
                                  {service.maxSeverity.toUpperCase()}
                                </Badge>
                              </div>
                              <div className="flex items-center gap-2">
                                <span className="text-sm font-mono text-muted-foreground">
                                  {service.hostCount} hosts
                                </span>
                                <Badge variant="outline" className="text-xs">
                                  <AlertTriangle className="h-3 w-3 mr-1" />
                                  {service.vulnerabilities}
                                </Badge>
                              </div>
                            </div>
                            
                            {/* Vulnerability intensity bar */}
                            <div className="mt-2 h-1 bg-card rounded-full overflow-hidden">
                              <div 
                                className={`h-full ${getSeverityColor(service.maxSeverity)} transition-all duration-500`}
                                style={{ width: `${(service.vulnerabilities / maxVulns) * 100}%` }}
                              />
                            </div>
                          </div>
                        </div>
                      </TooltipTrigger>
                      <TooltipContent side="bottom" className="max-w-xs">
                        <div className="space-y-1">
                          <div className="font-semibold">{service.service} Service</div>
                          <div className="text-sm">
                            Found on {service.hostCount} host{service.hostCount !== 1 ? 's' : ''}
                          </div>
                          <div className="text-sm">
                            {service.vulnerabilities} vulnerabilities detected
                          </div>
                          <div className="text-sm">
                            Highest severity: <span className="font-semibold">{service.maxSeverity}</span>
                          </div>
                        </div>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                ))}
            </div>
          </div>
        ) : (
          <div className="text-center py-8">
            <Shield className="h-12 w-12 mx-auto text-green-500 mb-2" />
            <p className="text-muted-foreground font-mono text-sm">
              No vulnerabilities detected in current scan
            </p>
          </div>
        )}

        {/* Risk Score Legend */}
        <div className="p-3 bg-card/20 rounded-lg border border-border/50">
          <div className="text-xs font-mono text-muted-foreground mb-2">Risk Intensity Scale</div>
          <div className="flex items-center justify-between">
            <span className="text-xs font-mono">Low</span>
            <div className="flex-1 h-2 mx-2 bg-gradient-to-r from-blue-500/20 via-yellow-500/40 to-red-500/60 rounded" />
            <span className="text-xs font-mono">High</span>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}